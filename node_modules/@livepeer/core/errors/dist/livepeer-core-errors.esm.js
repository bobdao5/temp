/**
 * Error subclass for http errors.
 */
class HttpError extends Error {
  constructor( /** Number error code */
  code, /** Human-readable string */
  message, /** Low-level error */
  internal, /** Other useful information about error */
  data) {
    if (!Number.isInteger(code)) throw new Error('"code" must be an integer.');
    if (!message || typeof message !== 'string') throw new Error('"message" must be a nonempty string.');
    super(message);
    this.code = code;
    this.data = data;
    this.internal = internal;
  }
}
const STREAM_OPEN_ERROR_MESSAGE = 'stream open failed';
const STREAM_OFFLINE_ERROR_MESSAGE = 'stream is offline';
const STREAM_WAITING_FOR_DATA_ERROR_MESSAGE = 'stream is waiting for data';
const ACCESS_CONTROL_ERROR_MESSAGE = 'shutting down since this session is not allowed to view this stream';
const isStreamOfflineError = error => error.message.toLowerCase().includes(STREAM_OPEN_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_WAITING_FOR_DATA_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_OFFLINE_ERROR_MESSAGE);
const isAccessControlError = error => error.message.toLowerCase().includes(ACCESS_CONTROL_ERROR_MESSAGE);

export { ACCESS_CONTROL_ERROR_MESSAGE, HttpError, STREAM_OFFLINE_ERROR_MESSAGE, STREAM_OPEN_ERROR_MESSAGE, STREAM_WAITING_FOR_DATA_ERROR_MESSAGE, isAccessControlError, isStreamOfflineError };
