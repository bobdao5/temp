/**
 * Checks if WebRTC is supported.
 */
export declare const isWebRTCSupported: () => boolean;
export declare function createPeerConnection(host: string | null): RTCPeerConnection | null;
export type WebRTCVideoConfig = {
    /**
     * The timeout of the network requests made for the SDP negotiation, in ms.
     *
     * @default 10000
     */
    sdpTimeout?: number;
};
/**
 * Performs the actual SDP exchange.
 *
 * 1. Sends the SDP offer to the server,
 * 2. Awaits the server's offer.
 *
 * SDP describes what kind of media we can send and how the server and client communicate.
 *
 * https://developer.mozilla.org/en-US/docs/Glossary/SDP
 * https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html#name-protocol-operation
 */
export declare function negotiateConnectionWithClientOffer(peerConnection: RTCPeerConnection | null | undefined, endpoint: string | null | undefined, ofr: RTCSessionDescription | null, timeout?: number): Promise<RTCIceServer[] | null>;
/**
 * Constructs the client's SDP offer
 *
 * SDP describes what kind of media we can send and how the server and client communicate.
 *
 * https://developer.mozilla.org/en-US/docs/Glossary/SDP
 * https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html#name-protocol-operation
 */
export declare function constructClientOffer(peerConnection: RTCPeerConnection | null | undefined, endpoint: string | null | undefined): Promise<RTCSessionDescription | null>;
export declare function getRedirectUrl(endpoint: string, abortController: AbortController, timeout?: number): Promise<URL | null>;
