import type { ENV } from '../../config';
import type { AccountEnvOptionsType, IMessageIPFS } from '../../types';
import type { Env, IConnectedUser, IFeeds, IUser } from '@pushprotocol/restapi';
declare type HandleOnChatIconClickProps = {
    isModalOpen: boolean;
    setIsModalOpen: (isModalOpen: boolean) => void;
};
declare type GetChatsType = {
    pgpPrivateKey: string;
    supportAddress: string;
    limit: number;
    threadHash?: string;
    env?: Env;
    account: string;
};
export declare const handleOnChatIconClick: ({ isModalOpen, setIsModalOpen, }: HandleOnChatIconClickProps) => void;
export declare const createUserIfNecessary: (options: AccountEnvOptionsType) => Promise<IConnectedUser>;
declare type GetChatsResponseType = {
    chatsResponse: IMessageIPFS[];
    lastThreadHash: string | null;
    lastListPresent: boolean;
};
export declare const getChats: (options: GetChatsType) => Promise<GetChatsResponseType>;
declare type DecrypteChatType = {
    message: IMessageIPFS;
    connectedUser: IConnectedUser;
    env: ENV;
};
export declare const decryptChat: (options: DecrypteChatType) => Promise<IMessageIPFS>;
export declare const copyToClipboard: (address: string) => void;
export declare const getDefaultFeedObject: ({ user }: {
    user: IUser;
}) => IFeeds;
declare type CheckIfIntentType = {
    chat: IFeeds;
    account: string;
};
export declare const checkIfIntent: ({ chat, account }: CheckIfIntentType) => boolean;
export declare const checkIfUnread: (chatId: string, chat: IFeeds) => boolean;
export {};
