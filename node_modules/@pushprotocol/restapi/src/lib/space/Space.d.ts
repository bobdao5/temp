import { Video } from '../video';
import { update } from './update';
import { start } from './start';
import { inviteToPromote } from './inviteToPromote';
import { acceptPromotionInvite } from './acceptPromotionInvite';
import { connectInvitee } from './connectInvitee';
import { rejectPromotionInvite } from './rejectPromotionInvite';
import { requestToBePromoted } from './requestToBePromoted';
import { acceptPromotionRequest } from './acceptPromotionRequest';
import { rejectPromotionRequest } from './rejectPromotionRequest';
import { connectPromotor } from './connectPromotor';
import { addSpeaker } from './addSpeaker';
import { removeSpeaker } from './removeSpeaker';
import { join } from './join';
import { leave } from './leave';
import { stop } from './stop';
import { initialize } from './initialize';
import { VideoStreamMerger } from 'video-stream-merger';
import { EnvOptionsType, SignerType, SpaceDTO, SpaceData } from '../types';
export declare const initSpaceData: {
    connectionData: import("../types").VideoCallData;
    members: never[];
    pendingMembers: never[];
    contractAddressERC20: null;
    numberOfERC20: number;
    contractAddressNFT: null;
    numberOfNFTTokens: number;
    verificationProof: string;
    spaceImage: null;
    spaceName: string;
    isPublic: boolean;
    spaceDescription: string;
    spaceCreator: string;
    spaceId: string;
    scheduleAt: null;
    scheduleEnd: null;
    status: null;
    inviteeDetails: {};
};
export interface SpaceConstructorType extends EnvOptionsType {
    signer: SignerType;
    pgpPrivateKey: string;
    chainId: number;
    address: string;
    setSpaceData: (fn: (data: SpaceData) => SpaceData) => void;
}
export declare class Space extends Video {
    protected mergeStreamObject: VideoStreamMerger | null;
    protected spaceSpecificData: SpaceDTO;
    protected setSpaceSpecificData: (fn: (data: SpaceDTO) => SpaceDTO) => void;
    setSpaceData: (fn: (data: SpaceData) => SpaceData) => void;
    constructor(options: SpaceConstructorType);
    initialize: typeof initialize;
    update: typeof update;
    createAudioStream: () => Promise<void>;
    start: typeof start;
    inviteToPromote: typeof inviteToPromote;
    acceptPromotionInvite: typeof acceptPromotionInvite;
    connectInvitee: typeof connectInvitee;
    rejectPromotionInvite: typeof rejectPromotionInvite;
    requestToBePromoted: typeof requestToBePromoted;
    acceptPromotionRequest: typeof acceptPromotionRequest;
    connectPromotor: typeof connectPromotor;
    rejectPromotionRequest: typeof rejectPromotionRequest;
    addSpeaker: typeof addSpeaker;
    removeSpeaker: typeof removeSpeaker;
    join: typeof join;
    leave: typeof leave;
    stop: typeof stop;
}
export default Space;
