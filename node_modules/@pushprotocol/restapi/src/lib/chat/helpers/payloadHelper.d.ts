import { IConnectedUser, GroupDTO, SpaceDTO, ChatStatus } from '../../types';
import { ENV } from '../../constants';
import { META_MESSAGE_META } from '../../types/metaTypes';
export interface ISendMessagePayload {
    fromDID: string;
    toDID: string;
    fromCAIP10: string;
    toCAIP10: string;
    messageObj: {
        content: string;
        meta?: META_MESSAGE_META;
    } | string;
    messageType: string;
    encType: string;
    encryptedSecret: string | null | undefined;
    verificationProof?: string;
    /**
     * @deprecated - Use messageObj instead
     */
    messageContent: string;
    /**
     * @deprecated - Use messageObj instead
     */
    signature: string | null | undefined;
    /**
     * @deprecated - Use messageObj instead
     */
    sigType: string | null | undefined;
}
export interface IApproveRequestPayload {
    fromDID: string;
    toDID: string;
    signature: string;
    status: 'Approved';
    sigType: string;
    verificationProof?: string | null | undefined;
}
export interface ICreateGroupRequestPayload {
    groupName: string;
    groupDescription: string | null;
    members: Array<string>;
    groupImage: string | null;
    admins: Array<string>;
    isPublic: boolean;
    contractAddressNFT?: string;
    numberOfNFTs?: number;
    contractAddressERC20?: string;
    numberOfERC20?: number;
    groupCreator: string;
    verificationProof: string;
    meta?: string;
}
export interface IUpdateGroupRequestPayload {
    groupName: string;
    groupImage: string | null;
    members: Array<string>;
    admins: Array<string>;
    address: string;
    verificationProof: string;
}
export declare const sendMessagePayload: (receiverAddress: string, senderCreatedUser: IConnectedUser, messageObj: {
    content: string;
    meta?: META_MESSAGE_META;
}, messageContent: string, messageType: string, group: GroupDTO | null, env: ENV) => Promise<ISendMessagePayload>;
export declare const approveRequestPayload: (fromDID: string, toDID: string, status: 'Approved', sigType: string, signature: string) => IApproveRequestPayload;
export declare const createGroupPayload: (groupName: string, groupDescription: string | null, members: Array<string>, groupImage: string | null, admins: Array<string>, isPublic: boolean, groupCreator: string, verificationProof: string, contractAddressNFT?: string | undefined, numberOfNFTs?: number | undefined, contractAddressERC20?: string | undefined, numberOfERC20?: number | undefined, meta?: string | undefined, groupType?: string | null | undefined, scheduleAt?: Date | null | undefined, scheduleEnd?: Date | null | undefined) => ICreateGroupRequestPayload;
export declare const groupDtoToSpaceDto: (groupDto: GroupDTO) => SpaceDTO;
export declare const updateGroupPayload: (groupName: string, groupImage: string | null, groupDescription: string | null, members: Array<string>, admins: Array<string>, address: string, verificationProof: string, scheduleAt?: Date | null | undefined, scheduleEnd?: Date | null | undefined, status?: ChatStatus | null | undefined, meta?: string | null | undefined) => IUpdateGroupRequestPayload;
export declare const getAdminsList: (members: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[]) => Array<string>;
export declare const getSpaceAdminsList: (members: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[]) => Array<string>;
export declare const convertToWalletAddressList: (memberList: {
    wallet: string;
}[]) => string[];
export declare const getMembersList: (members: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isAdmin: boolean;
    image: string;
}[]) => Array<string>;
export declare const getSpacesMembersList: (members: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[], pendingMembers: {
    wallet: string;
    publicKey: string;
    isSpeaker: boolean;
    image: string;
}[]) => Array<string>;
